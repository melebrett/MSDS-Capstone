data = model_df,
mean_adj_sg_next ~ mean_latent_skill + ma_60 + ma_180 + ma_365,
weights = rounds
)
summary(mod_ls_resid)
# a. model residual based on recent performance
# - how much will skill change from this baseline based on recent performance
# - & use the original model with aging curve to predict future year
mod_ls_resid <- lm(
data = model_df,
resid_skill_next ~ resid_skill + diff_60 + diff_180 + bs(diff_365),
weights = wt
)
summary(mod_ls_resid)
-3.7 - -3.4
# a. model residual based on recent performance
# - how much will skill change from this baseline based on recent performance
# - & use the original model with aging curve to predict future year
mod_ls_resid <- lm(
data = model_df,
resid_skill_next ~ resid_skill + diff_60 + diff_180 + diff_365,
weights = wt
)
summary(mod_ls_resid)
ggplot(data = model_df) +
geom_point(
aes(x=diff_365, y = resid_skill)
)
ggplot(data = model_df) +
geom_point(
aes(x=diff_365, y = resid_skill_next)
)
# (2) future latent skill
# should have some rtm here
calculate_ma <- function(data, time_window){
obj <- zoo::zoo(data$adj_sg_total, data$date)
results <- zoo::rollapplyr(obj, width = time_window, FUN = mean,partial = TRUE, align = "right", fill = NA)
tibble(date = time(results),
ma = as.numeric(results))
}
# moving averages
mas <- train %>%
group_by(dg_id) %>%
arrange(date) %>%
nest() %>%
mutate(
ma_60 = purrr::map(data, ~calculate_ma(.,60)),
ma_180 = purrr::map(data, ~calculate_ma(.,180)),
ma_365 = purrr::map(data, ~calculate_ma(.,365)),
)
mas <- mas %>%
dplyr::select(dg_id, starts_with('ma')) %>%
unnest(c(ma_60, ma_180, ma_365), names_sep = "_") %>%
dplyr::select(
dg_id, date = ma_60_date, ma_60 = ma_60_ma, ma_180 = ma_180_ma, ma_365 = ma_365_ma
)
# summarize within year
years <- train %>%
group_by(dg_id, year) %>%
summarise(
rounds = n(),
mean_adj_sg = mean(adj_sg_total),
mean_latent_skill = mean(latent_skill),
resid_skill = mean(adj_sg_total - latent_skill)
)
# add next year's residual
years <- years %>%
group_by(dg_id) %>%
arrange(year) %>%
mutate(
resid_skill_next = lead(resid_skill),
mean_adj_sg_next = lead(mean_adj_sg)
)
# get the last observation for each player in a year, add to yearly summary
years <- mas %>%
mutate(year = lubridate::year(date)) %>%
group_by(dg_id, year) %>%
arrange(date) %>%
slice_tail(n=1) %>%
ungroup() %>%
left_join(years) %>%
rename(last_round = date)
# drop anyone with missing data in following year, calculate differences between ma and skill estimate
model_df <- years %>%
group_by(year) %>%
mutate(wt = normalize(rounds)) %>%
drop_na(resid_skill_next) %>%
mutate(
diff_60 = ma_60 - mean_latent_skill,
diff_180 = ma_180 - mean_latent_skill,
diff_365 = ma_365 - mean_latent_skill
)
# a. model residual based on recent performance
# - how much will skill change from this baseline based on recent performance
# - & use the original model with aging curve to predict future year
mod_ls_resid <- lm(
data = model_df,
resid_skill_next ~ resid_skill + diff_60 + diff_180 + diff_365,
weights = wt
)
summary(mod_ls_resid)
mas %>%
filter(dg_id == 19195)
mas %>%
filter(dg_id == 19195) %>%
ggplot() +
geom_line(aes(x=date, y = ma_60))
mas %>%
filter(dg_id == 19195) %>%
ggplot() +
geom_line(aes(x=date, y = ma_60), color = "blue")
mas %>%
filter(dg_id == 19195) %>%
ggplot() +
geom_line(aes(x=date, y = ma_60), color = "blue") +
geom_line(aes(x=date, y = ma_365), color = "red")
mas %>%
filter(dg_id == 19195) %>%
ggplot() +
geom_line(aes(x=date, y = ma_60), color = "blue") +
geom_line(aes(x=date, y = ma_180), color = "red") +
geom_line(aes(x=date, y = ma_365), color = "green")
mas <- train %>%
group_by(dg_id) %>%
arrange(date) %>%
nest() %>%
mutate(
ma_60 = purrr::map(data, ~calculate_ma(.,60)),
ma_90 = purrr::map(data, ~calculate_ma(.,90)),
ma_180 = purrr::map(data, ~calculate_ma(.,180)),
ma_365 = purrr::map(data, ~calculate_ma(.,365)),
ma_500 = purrr::map(data, ~calculate_ma(.,500)),
)
mas <- mas %>%
dplyr::select(dg_id, starts_with('ma')) %>%
unnest(c(ma_60, ma_180, ma_365), names_sep = "_") %>%
dplyr::select(
dg_id, date = ma_60_date, ma_60 = ma_60_ma, ma_90 = ma_90_ma, ma_180 = ma_180_ma, ma_365 = ma_365_ma, ma_500 = ma_500_ma
)
mas <- mas %>%
dplyr::select(dg_id, starts_with('ma')) %>%
unnest(c(ma_60, ma_90, ma_180, ma_365. ma_500), names_sep = "_") %>%
mas <- mas %>%
dplyr::select(dg_id, starts_with('ma')) %>%
unnest(c(ma_60, ma_90, ma_180, ma_365, ma_500), names_sep = "_") %>%
dplyr::select(
dg_id, date = ma_60_date, ma_60 = ma_60_ma, ma_90 = ma_90_ma, ma_180 = ma_180_ma, ma_365 = ma_365_ma, ma_500 = ma_500_ma
)
mas %>%
filter(dg_id == 19195) %>%
ggplot() +
geom_line(aes(x=date, y = ma_60), color = "blue") +
geom_line(aes(x=date, y = ma_90), color = "red") +
geom_line(aes(x=date, y = ma_365), color = "green")
mas %>%
filter(dg_id == 19195) %>%
ggplot() +
geom_line(aes(x=date, y = ma_60), color = "blue") +
geom_line(aes(x=date, y = ma_500), color = "red") +
geom_line(aes(x=date, y = ma_365), color = "green")
mas %>%
filter(dg_id == 19195)
## rolling mean by time window (e.g., 3 days) rather than
## by number of observations (e.g., when these are unequally spaced):
#
## - test data
tt <- as.Date("2000-01-01") + c(1, 2, 5, 6, 7, 8, 10)
tt
zoo(seq_along(tt), tt)
z <- zoo(seq_along(tt), tt)
zoo(, seq(start(z), end(z), "day"))
## - fill it out to a daily series, zm, using NAs
## using a zero width zoo series g on a grid
g <- zoo(, seq(start(z), end(z), "day"))
zm <- merge(z, g)
zm
z
## - 3-day rolling mean
rollapply(zm, 3, mean, na.rm = TRUE, fill = NA)
# moving averages
df <- train %>% filter(dg_id == 19195)
tt
zoo(seq_along(train$date), train$adj_sg_total)
zoo(train$adj_sg_total,seq_along(train$date), )
zoo(train$adj_sg_total,train$date )
z <- zoo(train$adj_sg_total,train$date)
train %>% group_by(date) %>% summarise(adj_Sg_total = mean(adj_sg_total))
df <- df %>% group_by(date) %>% summarise(adj_sg_total = mean(adj_sg_total))
z <- zoo(train$adj_sg_total,train$date)
# moving averages
df <- train %>% filter(dg_id == 19195) %>% arrange(date)
tt
seq_along(tt)
train$date
# moving averages
df <- train %>% filter(dg_id == 19195) %>% arrange(date)
z <- zoo(df$adj_sg_total,df$date)
g <- zoo(,seq(start(z), end(z), "day"))
g
zm <- merge(z,g)
zm
rollapply(zm, q0, mean, na.rm = TRUE, fill = NA)
rollapply(zm, 10, mean, na.rm = TRUE, fill = NA)
rollapply(zm, 10,FUN = function(x) mean(x, na.rm=T), na.rm = TRUE, fill = NA)
df %>% filter(date == '2018-07-24')
rollapply(zm, 10,FUN = function(x) mean(x, na.rm=T), partial = TRUE, fill = NA)
rollapply(zm, 60,FUN = function(x) mean(x, na.rm=T), partial = TRUE, fill = NA)
rollapply(zm, 365,FUN = function(x) mean(x, na.rm=T), partial = TRUE, fill = NA)
calculate_ma <- function(data, time_window){
z <- zoo::zoo(data$adj_sg_total, data$date)
z <- zoo(df$adj_sg_total,df$date)
g <- zoo(,seq(start(z), end(z), "day"))
zm <- merge(z,g)
results <- zoo::rollapplyr(zm, width = time_window, FUN = function(x) mean(x, na.rm=T), partial = TRUE, align = "right", fill = NA)
tibble(date = time(results),
ma = as.numeric(results)) %>%
filter(date %in% data$date)
}
calculate_ma(df, 365)
# (2) future latent skill
# should have some rtm here
calculate_ma <- function(data, time_window){
z <- zoo::zoo(data$adj_sg_total, data$date)
g <- zoo(,seq(start(z), end(z), "day"))
zm <- merge(z,g)
results <- zoo::rollapplyr(zm, width = time_window, FUN = function(x) mean(x, na.rm=T), partial = TRUE, align = "right", fill = NA)
tibble(date = time(results),
ma = as.numeric(results)) %>%
filter(date %in% data$date)
}
# (2) future latent skill
# should have some rtm here
calculate_ma <- function(data, time_window){
z <- zoo::zoo(data$adj_sg_total, data$date)
g <- zoo(,seq(start(z), end(z), "day"))
zm <- merge(z,g)
results <- zoo::rollapplyr(zm, width = time_window, FUN = function(x) mean(x, na.rm=T), partial = TRUE, align = "right", fill = NA)
tibble(date = time(results),
ma = as.numeric(results)) %>%
filter(date %in% data$date)
}
# moving averages
mas <- train %>%
group_by(dg_id) %>%
arrange(date) %>%
nest() %>%
mutate(
ma_60 = purrr::map(data, ~calculate_ma(.,60)),
# ma_90 = purrr::map(data, ~calculate_ma(.,90)),
ma_180 = purrr::map(data, ~calculate_ma(.,180)),
ma_365 = purrr::map(data, ~calculate_ma(.,365))
# ma_500 = purrr::map(data, ~calculate_ma(.,500)),
)
mas <- mas %>%
dplyr::select(dg_id, starts_with('ma')) %>%
unnest(c(ma_60, ma_180, ma_365), names_sep = "_") %>%
dplyr::select(
dg_id, date = ma_60_date, ma_60 = ma_60_ma, ma_180 = ma_180_ma, ma_365 = ma_365_ma
)
mas %>%
filter(dg_id == 19195) %>%
ggplot() +
geom_line(aes(x=date, y = ma_60), color = "blue") +
geom_line(aes(x=date, y = ma_500), color = "red") +
geom_line(aes(x=date, y = ma_365), color = "green")
mas %>%
filter(dg_id == 19195) %>%
ggplot() +
geom_line(aes(x=date, y = ma_60), color = "blue") +
geom_line(aes(x=date, y = ma_180), color = "red") +
geom_line(aes(x=date, y = ma_365), color = "green")
mas %>%
glimpse
mas %>%
drop_na()
# summarize within year
years <- train %>%
group_by(dg_id, year) %>%
summarise(
rounds = n(),
mean_adj_sg = mean(adj_sg_total),
mean_latent_skill = mean(latent_skill),
resid_skill = mean(adj_sg_total - latent_skill)
)
# add next year's residual
years <- years %>%
group_by(dg_id) %>%
arrange(year) %>%
mutate(
resid_skill_next = lead(resid_skill),
mean_adj_sg_next = lead(mean_adj_sg)
)
# get the last observation for each player in a year, add to yearly summary
years <- mas %>%
mutate(year = lubridate::year(date)) %>%
group_by(dg_id, year) %>%
arrange(date) %>%
slice_tail(n=1) %>%
ungroup() %>%
left_join(years) %>%
rename(last_round = date)
normalize <- function(x, na.rm = TRUE) {
return((x- min(x)) /(max(x)-min(x)))
}
# drop anyone with missing data in following year, calculate differences between ma and skill estimate
model_df <- years %>%
group_by(year) %>%
mutate(wt = normalize(rounds)) %>%
drop_na(resid_skill_next) %>%
mutate(
diff_60 = ma_60 - mean_latent_skill,
diff_180 = ma_180 - mean_latent_skill,
diff_365 = ma_365 - mean_latent_skill
)
# a. model residual based on recent performance
# - how much will skill change from this baseline based on recent performance
# - & use the original model with aging curve to predict future year
mod_ls_resid <- lm(
data = model_df,
resid_skill_next ~ resid_skill + diff_60 + diff_180 + diff_365,
weights = wt
)
summary(mod_ls_resid)
# b. model actual adjusted sg based on recent performance and average skill estimate within season
mod_ls_next <- lm(
data = model_df,
mean_adj_sg_next ~ mean_latent_skill + ma_60 + ma_180 + ma_365,
weights = rounds
)
summary(mod_sg_next)
summary(mod_ls_next)
summary(mod_ls_resid)
ggplot(data = model_df) +
geom_point(
aes(x=diff_365, y = resid_skill_next)
)
summary(mod_ls_resid)
ggplot(data = model_df) +
geom_point(
aes(x=diff_60, y = resid_skill_next)
)
ggplot(data = model_df) +
geom_point(
aes(x=diff_180, y = resid_skill_next)
)
ggplot(data = model_df) +
geom_point(
aes(x=diff_365, y = resid_skill_next)
)
ggplot(data = model_df) +
geom_point(
aes(x=diff_365, y = resid_skill_next)
) +
geom_smooth()
ggplot(data = model_df) +
geom_point(
aes(x=diff_365, y = resid_skill_next)
) +
geom_smooth(aes(x=diff_365, y = resid_skill_next))
# a. model residual based on recent performance
# - how much will skill change from this baseline based on recent performance
# - & use the original model with aging curve to predict future year
mod_ls_resid <- lm(
data = model_df,
resid_skill_next ~ resid_skill + diff_60 + diff_180 + diff_365,
)
summary(mod_ls_resid)
# (2) future latent skill
# should have some rtm here
calculate_ma <- function(data, time_window){
z <- zoo::zoo(data$adj_sg_total, data$date)
# g <- zoo(,seq(start(z), end(z), "day"))
# zm <- merge(z,g)
results <- zoo::rollapplyr(z, width = time_window, FUN = function(x) mean(x, na.rm=T), partial = TRUE, align = "right", fill = NA)
tibble(date = time(results),
ma = as.numeric(results)) %>%
filter(date %in% data$date)
}
# moving averages
mas <- train %>%
group_by(dg_id) %>%
arrange(date) %>%
nest() %>%
mutate(
ma_1 = purrr::map(data, ~calculate_ma(.,15)),
# ma_90 = purrr::map(data, ~calculate_ma(.,90)),
ma_2 = purrr::map(data, ~calculate_ma(.,30)),
ma_3 = purrr::map(data, ~calculate_ma(.,60))
# ma_500 = purrr::map(data, ~calculate_ma(.,500)),
)
mas <- mas %>%
dplyr::select(dg_id, starts_with('ma')) %>%
unnest(c(ma_1, ma_2, ma_3), names_sep = "_") %>%
dplyr::select(
dg_id, date = ma_1_date, ma_1 = ma_1_ma, ma_2 = ma_2_ma, ma_3 = ma_3_ma
)
mas %>%
filter(dg_id == 19195) %>%
ggplot() +
geom_line(aes(x=date, y = ma_60), color = "blue") +
geom_line(aes(x=date, y = ma_180), color = "red") +
geom_line(aes(x=date, y = ma_365), color = "green")
mas %>%
filter(dg_id == 19195) %>%
ggplot() +
geom_line(aes(x=date, y = ma_1), color = "blue") +
geom_line(aes(x=date, y = ma_2), color = "red") +
geom_line(aes(x=date, y = ma_3), color = "green")
# summarize within year
years <- train %>%
group_by(dg_id, year) %>%
summarise(
rounds = n(),
mean_adj_sg = mean(adj_sg_total),
mean_latent_skill = mean(latent_skill),
resid_skill = mean(adj_sg_total - latent_skill)
)
# add next year's residual
years <- years %>%
group_by(dg_id) %>%
arrange(year) %>%
mutate(
resid_skill_next = lead(resid_skill),
mean_adj_sg_next = lead(mean_adj_sg)
)
# get the last observation for each player in a year, add to yearly summary
years <- mas %>%
mutate(year = lubridate::year(date)) %>%
group_by(dg_id, year) %>%
arrange(date) %>%
slice_tail(n=1) %>%
ungroup() %>%
left_join(years) %>%
rename(last_round = date)
normalize <- function(x, na.rm = TRUE) {
return((x- min(x)) /(max(x)-min(x)))
}
# drop anyone with missing data in following year, calculate differences between ma and skill estimate
model_df <- years %>%
group_by(year) %>%
mutate(wt = normalize(rounds)) %>%
drop_na(resid_skill_next) %>%
mutate(
diff_1 = ma_1 - mean_latent_skill,
diff_2 = ma_2 - mean_latent_skill,
diff_3 = ma_3 - mean_latent_skill
)
# a. model residual based on recent performance
# - how much will skill change from this baseline based on recent performance
# - & use the original model with aging curve to predict future year
mod_ls_resid <- lm(
data = model_df,
resid_skill_next ~ resid_skill + diff_1 + diff_2 + diff_3,
)
summary(mod_ls_resid)
ggplot(data = model_df) +
geom_point(
aes(x=diff_365, y = resid_skill_next)
) +
geom_smooth(aes(x=diff_3, y = resid_skill_next))
ggplot(data = model_df) +
geom_point(
aes(x=diff_3, y = resid_skill_next)
) +
geom_smooth(aes(x=diff_3, y = resid_skill_next))
# a. model residual based on recent performance
# - how much will skill change from this baseline based on recent performance
# - & use the original model with aging curve to predict future year
mod_ls_resid <- lm(
data = model_df,
resid_skill_next ~ resid_skill + diff_1 + diff_2 + bs(diff_3),
)
summary(mod_ls_resid)
ggplot(data = model_df) +
geom_point(
aes(x=diff_2, y = resid_skill_next)
) +
geom_smooth(aes(x=diff_2, y = resid_skill_next))
summary(mod_ls_resid)
ggplot(data = model_df) +
geom_point(
aes(x=diff_1, y = resid_skill_next)
) +
geom_smooth(aes(x=diff_1, y = resid_skill_next))
summary(mod_ls_resid)
ggplot(data = model_df) +
geom_point(
aes(x=diff_3, y = resid_skill_next)
) +
geom_smooth(aes(x=diff_3, y = resid_skill_next, method = 'lm'))
ggplot(data = model_df) +
geom_point(
aes(x=diff_3, y = resid_skill_next)
) +
geom_smooth(aes(x=diff_3, y = resid_skill_next), method = 'lm')
summary(mod_ls_resid)
# a. model residual based on recent performance
# - how much will skill change from this baseline based on recent performance
# - & use the original model with aging curve to predict future year
mod_ls_resid <- lm(
data = model_df,
resid_skill_next ~ resid_skill + diff_1 + diff_2 + diff_3,
)
saveRDS("models/latent_skill_residual.RDS")
saveRDS(mod_ls, "models/latent_skill_residual.RDS")
# b. model actual adjusted sg based on recent performance and average skill estimate within season
mod_ls_next <- lm(
data = model_df,
mean_adj_sg_next ~ mean_latent_skill + ma_1 + ma_2 + ma_3,
weights = rounds
)
summary(mod_ls_next)
