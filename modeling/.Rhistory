data = train,
total_money_real ~ s(mean_latent_skill, k = 25) + sd_latent_skill + age,
family = tw()
)
gam.check(mod_earnings5)
mod_earnings5 <- mgcv::gam(
data = train,
total_money_pct ~ s(mean_latent_skill) + sd_latent_skill + age,
family = tw()
)
gam.check(mod_earnings5)
test$preds <- predict(mod_earnings5, test, type = "response")
test %>%
arrange(-preds)
test %>%
arrange(-preds) %>%
dplyr::select(
total_money_pct, preds, total_money_real
)
test
test %>%
arrange(-preds) %>%
mutate(preds_money = preds*base_pool) %>%
dplyr::select(
total_money_pct, preds, total_money_real, preds_money
)
test %>%
arrange(-preds) %>%
mutate(preds_money = preds*base_pool) %>%
dplyr::select(
total_money_pct, preds, total_money_real, preds_money
) %>%
summarise(
total = sum(preds_money)
)
test %>%
arrange(-preds) %>%
mutate(preds_money = preds*base_pool) %>%
dplyr::select(
total_money_pct, preds, total_money_real, preds_money
) %>%
ungroup() %>%
summarise(
total = sum(preds_money)
)
base_pool
mod_earnings5 <- mgcv::gam(
data = train,
total_money_real~ mean_latent_skill + sd_latent_skill + age,
family = tw()
)
test$preds <- predict(mod_earnings5, test, type = "response")
test %>%
arrange(-preds) %>%
dplyr::select(
total_money_pct, preds, total_money_real,
) %>%
ungroup() %>%
summarise(
total = sum(preds)
)
base_pool
mod_earnings1 <- mgcv::gam(
data = train,
total_money_real ~ mean_latent_skill + age,
family = tw()
)
mod_earnings1 <- mgcv::gam(
data = train,
total_money_real ~ mean_latent_skill + age,
family = tw()
)
summary(mod_earnings1)
AIC(mod_earnings1)
gam.check(mod_earnings1)
train_preds <- predict(mod_earnings1, type = "response")
test_preds <- predict(mod_earnings1, test, type = "response")
ggplot() +
geom_point(aes(x = train$total_money_real, y=train_preds)) +
geom_abline()
mod_earnings2 <- mgcv::gam(
data = train,
total_money_real ~ s(mean_latent_skill) + age,
family = tw(),
select = T
)
AIC(mod_earnings1, mod_earnings2)
gam.check(mod_earnings2)
mod_earnings3 <- mgcv::gam(
data = train,
total_money_real ~ bs(mean_latent_skill) + sd_latent_skill + age,
family = tw(),
select = T
)
summary(mod_earnings3)
AIC(mod_earnings1, mod_earnings2, mod_earnings3)
gam.check(mod_earnings6)
gam.check(mod_earnings3)
train_preds <- predict(mod_earnings3, type = "response")
test_preds <- predict(mod_earnings3, test, type = "response")
train_preds_norm <- (train_preds/sum(train_preds))*base_pool
test_preds_norm <- (test_preds/sum(test_preds))*base_pool
ggplot() +
geom_point(aes(x = train$total_money_real, y=train_preds_norm)) +
geom_abline()
ggplot() +
geom_density(aes(x=test_preds_norm, color = "pred")) +
geom_density(aes(x=test$total_money_real, color = "act"))
ggplot() +
geom_point(aes(x = test$total_money_real, y=test_preds_norm)) +
geom_abline()
ggplot() +
geom_point(aes(x = train$total_money_real, y=train_preds)) +
geom_abline()
ggplot() +
geom_point(aes(x = test$total_money_real, y=test_preds_norm)) +
geom_abline()
AIC(mod_earnings1, mod_earnings2, mod_earnings3)
mod_earnings4 <- mgcv::gam(
data = train,
total_money_real ~ bs(mean_latent_skill) + sd_latent_skill + age,
family = tw(),
select = T,
method = 'REML'
)
AIC(mod_earnings3,mod_earnings4)
AIC(mod_earnings1, mod_earnings2, mod_earnings3, mod_earnings4)
gam.check(mod_earnings4)
train_preds <- predict(mod_earnings4, type = "response")
test_preds <- predict(mod_earnings4, test, type = "response")
test_preds_norm <- (test_preds/sum(test_preds))*base_pool
ggplot() +
geom_point(aes(x = train$total_money_real, y=train_preds)) +
geom_abline()
ggplot() +
geom_point(aes(x = test$total_money_real, y=test_preds_norm)) +
geom_abline()
mod_earnings4 <- mgcv::gam(
data = bind_rows(train, test),
total_money_real ~ bs(mean_latent_skill) + sd_latent_skill + age,
family = tw(),
select = T,
method = 'REML'
)
summary(mod_earnings4)
saveRDS("models/earnings.rds")
mod_earnings_final <- mgcv::gam(
data = bind_rows(train, test),
total_money_real ~ bs(mean_latent_skill) + sd_latent_skill + age,
family = tw(),
select = T,
method = 'REML'
)
summary(mod_earnings_final)
saveRDS(mod_earnings_final, "models/earnings.rds")
library(tidyverse)
library(lubridate)
library(RPostgreSQL)
library(DBI)
library(lme4)
library(mgcv)
library(splines)
library(zoo)
source("./helpers.R")
source("./get_data.R")
target_years <- c(2023:2025)
conn <- pg_connect()
player_proj <- get_projections(conn)
primary_tour <- get_primary_tour(conn)
auto_qual <- get_major_qualifiers(conn)
rounds <- get_rounds(conn)
events <- get_events(conn)
players <- get_players(conn)
dbDisconnect(conn)
mod_earnings <- readRDS("models/earnings.rds")
# prep
finishes <- rounds %>%
filter(tour == 'pga' & !fin_text %in% c("CUT", "WD", "DQ", "MDF")) %>%
mutate(
fin = as.integer(str_remove(fin_text,"T"))
) %>%
group_by(year, tour, season, event_id, dg_id, player_name, fin_text, fin) %>%
summarise(
score = sum(round_score)
) %>%
group_by(year, tour, season, event_id) %>%
arrange(score) %>%
mutate(
fin_order = row_number()
)
payouts <- winnings %>%
group_by(calendar_year, season, event_name, dg_event_id, dg_event_name) %>%
arrange(-money) %>%
mutate(
fin_order = row_number()
) %>%
distinct(season, dg_event_id, fin_order, money) %>%
ungroup()
winnings <- get_winnings(conn)
conn <- pg_connect()
winnings <- get_winnings(conn)
payouts <- winnings %>%
group_by(calendar_year, season, event_name, dg_event_id, dg_event_name) %>%
arrange(-money) %>%
mutate(
fin_order = row_number()
) %>%
distinct(season, dg_event_id, fin_order, money) %>%
ungroup()
money <- finishes %>%
left_join(
payouts, by = c("event_id" = "dg_event_id", "season", "fin_order")
)
money <- money %>%
group_by(season, tour, dg_id) %>%
summarise(total_money = sum(money, na.rm = T)) %>%
group_by(season, tour) %>%
mutate(season_pool = sum(total_money)) %>%
ungroup()
money
base_pool <- unique(money[money$season == target_year - 5, ]$season_pool)
target_year <- 2023
base_pool <- unique(money[money$season == target_year - 5, ]$season_pool)
# inflation adjustment
money <- money %>%
dplyr::select(dg_id, season, total_money, season_pool) %>%
mutate(
total_money_pct = total_money/season_pool,
total_money_real = total_money*(base_pool/season_pool)
)
# add promotion & attrition
# any pga players last two years
pga_players <- player_proj %>%
inner_join(
primary_tour %>%
filter(year >= min(target_years) - 2 & year != min(target_years)) %>%
filter(primary_tour == 'pga') %>%
distinct(dg_id)
)
kft_players <- kft_players %>%
filter(!dg_id %in% pga_players$dg_id)
# any kft players last year
kft_players <- player_proj %>%
inner_join(
primary_tour %>%
filter(year == min(target_years - 1)) %>%
filter(primary_tour != 'pga') %>%
distinct(dg_id)
)
kft_players <- kft_players %>%
filter(!dg_id %in% pga_players$dg_id)
kft_players$promotion_prob <- predict(
mod_promotion_prob,
kft_players %>% select(dg_id, projection_year, age = future_age, mean_latent_skill = pred_latent_skill),
type = "response"
)
# models
mod_promotion_prob <- readRDS("models/promotion_prob.rds")
mod_attrition_prob <- readRDS("models/attrition_prob.rds")
mod_earnings <- readRDS("models/earnings.rds")
kft_players$promotion_prob <- predict(
mod_promotion_prob,
kft_players %>% select(dg_id, projection_year, age = future_age, mean_latent_skill = pred_latent_skill),
type = "response"
)
pga_players$attrition_prob <- predict(
mod_attrition_prob,
pga_players %>% select(dg_id, projection_year, age = future_age, mean_latent_skill = pred_latent_skill),
type = "response"
)
pga_players$attrition_prob <- as.numeric(pga_players$attrition_prob)
pga_players %>% glimpse
kft_players$pred_earnings <- predict(
mod_earnings,
kft_players %>% rename(age = future_age, mean_latent_skill = pred_latent_skill),
type = 'response'
)
pga_players$pred_earnings <- predict(
mod_earnings,
pga_players %>% rename(age = future_age, mean_latent_skill = pred_latent_skill),
type = 'response'
)
kft_players$pred_earnings <- as.numeric(
predict(
mod_earnings,
kft_players %>% rename(age = future_age, mean_latent_skill = pred_latent_skill),
type = 'response'
)
)
pga_players$pred_earnings <- as.numeric(
predict(
mod_earnings,
pga_players %>% rename(age = future_age, mean_latent_skill = pred_latent_skill),
type = 'response'
)
)
kft_players$promotion_prob <- as.numeric(kft_players$promotion_prob)
kft_players$pred_earnings <- kft_players$pred_earnings * kft_players$promotion_prob
pga_players$pred_earnings <- pga_players$pred_earnings * (1-pga_players$attrition_prob)
pga_players %>% glimpse
earnings_proj <- bind_rows(
pga_players %>%
dplyr::select(
dg_id, primary_tour, year, projection_year, future_age, pred_earnings
),
kft_players %>%
dplyr::select(
dg_id, primary_tour, year, projection_year, future_age, pred_earnings
)
)
earnings_proj %>%
group_by(dg_id, projection_year) %>%
tally()
earnings_proj %>%
group_by(dg_id, projection_year) %>%
tally() %>%
filter(n > 1)
money
season_pools <- money %>%
distinct(
year = season, season_pool
)
season_pools
season_pools %>%
mutate(
infl = season_pool/base_pool
)
season_pools %>%
arrange(year) %>%
mutate(
infl = season_pool/lag(season_pool)
)
earnings_proj %>%
left_join(season_pools)
season_pools %>%
arrange(year) %>%
mutate(
infl = season_pool/lag(season_pool)
)
season_pools %>%
filter(year != 2020) %>%
arrange(year) %>%
mutate(
infl = season_pool/lag(season_pool)
)
season_pools %>%
filter(year != 2020 & year != target_year) %>%
arrange(year) %>%
mutate(
infl = season_pool/lag(season_pool)
)
season_pools %>%
filter(year != 2020 & year != target_year) %>%
arrange(year) %>%
mutate(
infl = season_pool/lag(season_pool)
) %>%
summarise(
mean(infl)
)
season_pools %>%
filter(year != 2020 & year != target_year) %>%
arrange(year) %>%
mutate(
infl = season_pool/lag(season_pool)
) %>%
summarise(
mean(infl, na.rm= T)
)
pool_infl <- season_pools %>%
filter(year != 2020 & year != target_year) %>%
arrange(year) %>%
mutate(
infl = season_pool/lag(season_pool)
) %>%
summarise(
infl = mean(infl, na.rm= T)
) %>%
pull(infl)
pool_infl*0.9
(pool_infl-1)*0.9
(pool_infl-1)*0.67
(pool_infl-1)*0.75
((pool_infl-1)*0.75) + 1
pool_infl <- ((pool_infl-1)*0.75)
money
earnings_proj %>%
left_join(season_pools) %>%
mutate(
pred_earnings_real = pred_earnings,
pred_earnings = pred_earnings*(season_pool/base_pool),
pred_earnings = pred_earnings*(1+(projection_year - year)*pool_infl)
season_pool = season_pool * (1+(projection_year - year)*pool_infl)
earnings_proj %>%
left_join(season_pools) %>%
mutate(
pred_earnings_real = pred_earnings,
pred_earnings = pred_earnings*(season_pool/base_pool),
pred_earnings = pred_earnings*(1+(projection_year - year)*pool_infl),
season_pool = season_pool * (1+(projection_year - year)*pool_infl)
) %>%
group_by(projection_year) %>%
mutate(
pred_earnings = (pred_earnings/sum(pred_earnings))*season_pool,
pred_earnings_real = (pred_earnings_real/sum(pred_earnings_real))*base_pool,
pred_earnings_pct = pred_earnings/season_pool,
pred_earnings_real_pct = pred_earnings_real/base_pool
)
earnings_proj %>%
left_join(season_pools) %>%
mutate(
base_pool = base_pool,
pred_earnings_real = pred_earnings,
pred_earnings = pred_earnings*(season_pool/base_pool),
pred_earnings = pred_earnings*(1+(projection_year - year)*pool_infl),
season_pool = season_pool * (1+(projection_year - year)*pool_infl)
) %>%
group_by(projection_year) %>%
mutate(
pred_earnings = (pred_earnings/sum(pred_earnings))*season_pool,
pred_earnings_real = (pred_earnings_real/sum(pred_earnings_real))*base_pool,
pred_earnings_pct = pred_earnings/season_pool,
pred_earnings_real_pct = pred_earnings_real/base_pool
)
earnings_proj %>%
left_join(season_pools) %>%
mutate(
base_pool = base_pool,
pred_earnings_real = pred_earnings,
pred_earnings = pred_earnings*(season_pool/base_pool),
pred_earnings = pred_earnings*(1+(projection_year - year)*pool_infl),
season_pool = season_pool * (1+(projection_year - year)*pool_infl)
) %>%
group_by(projection_year) %>%
mutate(
pred_earnings = (pred_earnings/sum(pred_earnings))*season_pool,
pred_earnings_real = (pred_earnings_real/sum(pred_earnings_real))*base_pool,
pred_earnings_pct = pred_earnings/season_pool,
pred_earnings_real_pct = pred_earnings_real/base_pool
) %>%
filter(projection_year == 2023) %>%
arrange(-pred_earnings) %>%
dplyr::select(
pred_earnings, pred_earnings_pct, dg_id, everything()
)
earnings_proj %>%
left_join(season_pools) %>%
mutate(
base_pool = base_pool,
pred_earnings_real = pred_earnings,
pred_earnings_init = pred_earnings*(season_pool/base_pool),
pred_earnings = pred_earnings*(season_pool/base_pool),
pred_earnings = pred_earnings*(1+(projection_year - year)*pool_infl),
season_pool = season_pool * (1+(projection_year - year)*pool_infl)
) %>%
group_by(projection_year) %>%
mutate(
pred_earnings = (pred_earnings/sum(pred_earnings))*season_pool,
pred_earnings_real = (pred_earnings_real/sum(pred_earnings_real))*base_pool,
pred_earnings_pct = pred_earnings/season_pool,
pred_earnings_real_pct = pred_earnings_real/base_pool
) %>%
filter(projection_year == 2023) %>%
arrange(-pred_earnings) %>%
dplyr::select(
pred_earnings_init, pred_earnings, pred_earnings_pct, dg_id, everything()
)
earnings_proj %>%
left_join(season_pools) %>%
mutate(
base_pool = base_pool,
pred_earnings_real = pred_earnings,
pred_earnings = pred_earnings*(season_pool/base_pool),
pred_earnings = pred_earnings*(1+(projection_year - year)*pool_infl),
season_pool = season_pool * (1+(projection_year - year)*pool_infl)
) %>%
group_by(projection_year) %>%
mutate(
pred_earnings = (pred_earnings/sum(pred_earnings))*season_pool,
pred_earnings_real = (pred_earnings_real/sum(pred_earnings_real))*base_pool,
pred_earnings_pct = pred_earnings/season_pool,
pred_earnings_real_pct = pred_earnings_real/base_pool
) %>%
arrange(projection_year, -pred_earnings)
earnings_proj_final <- earnings_proj %>%
left_join(season_pools) %>%
mutate(
base_pool = base_pool,
pred_earnings_real = pred_earnings,
pred_earnings = pred_earnings*(season_pool/base_pool),
pred_earnings = pred_earnings*(1+(projection_year - year)*pool_infl),
season_pool = season_pool * (1+(projection_year - year)*pool_infl)
) %>%
group_by(projection_year) %>%
mutate(
pred_earnings = (pred_earnings/sum(pred_earnings))*season_pool,
pred_earnings_real = (pred_earnings_real/sum(pred_earnings_real))*base_pool,
pred_earnings_pct = pred_earnings/season_pool,
pred_earnings_real_pct = pred_earnings_real/base_pool
) %>%
arrange(projection_year, -pred_earnings)
conn <- pg_connect()
dbWriteTable(
conn,
SQL("gold.earnings_projections"),
earnings_proj_final %>%
mutate(last_updated = lubridate::now()),
append = F,
row.names = F,
overwrite = T
)
dbDisconnect(conn)
